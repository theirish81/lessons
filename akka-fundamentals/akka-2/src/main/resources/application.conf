# Custom dispatcher. Using a thread-pool-executor, we want it to use a minimum of 2 threads
# and a maximum of 3. We also state that a thread should be assigned to an actor for no more
# than two messages in a row, after which it should be assigned to another actor waiting for one.
#
# In this example all routers and actors declared in this configuration file share the same
# dispatcher so that there are more actors than available threads.
# This is to demonstrate that you can fine tune how many processes of one kind can run at the
# same time, but you can also control how many threads will actually work on stuff at the same time
#
# In our example, all 3 available threads might be dealing with a worker or a finalizer (unlikely),
# but certainly no more than 3 will be running at the same time.

limited-dispatcher {
	type = "Dispatcher"
	executor = "thread-pool-executor"
	throughput = 2
	thread-pool-executor {
		core-pool-size-min = 2
		core-pool-size-max = 3
	}
}

# Actor deployments. Here we configure routers and their children.
# Routers main purpose is to:
# a) create children actors as directed by the code (see Main.java)
# b) route messages to the children to be processed
akka {
	actor {
		deployment {
			# the 'worker' router
			"/worker" {
				dispatcher: "limited-dispatcher"
				router = round-robin-pool
				nr-of-instances = 3
			}
			# the router's children
			"/worker/*" {
				dispatcher: "limited-dispatcher"
			}
			# the 'finalizer' router
			"/finalizer" {
				dispatcher: "limited-dispatcher"
            	router = round-robin-pool
            	nr-of-instances = 3
			}
			# the router's children
			"/finalizer/*" {
				dispatcher: "limited-dispatcher"
			}
		}
	}
}